## Available FM
aws bedrock list-foundation-models --region us-east-1 --output json | grep sonnet

## Performance Optimization
Kiro: why my request to the agent response took very long time with no answers? 

üöÄ AWS-DevOps-bot: Ask me about DevOps on AWS! Type 'exit' to quit.
Installed 39 packages in 32ms
[I 2025-08-13 00:57:14,704.704 httpx] HTTP Request: POST https://knowledge-mcp.global.api.aws "HTTP/1.1 200 OK"
[I 2025-08-13 00:57:14,704.704 mcp.client.streamable_http] Negotiated protocol version: 2025-03-26
You > [I 2025-08-13 00:57:14,726.726 httpx] HTTP Request: POST https://knowledge-mcp.global.api.aws "HTTP/1.1 202 Accepted"
what is aws amplify
I'll search for information about AWS Amplify to provide you with a comprehensive overview.
Tool #1: aws___search_documentation
[I 2025-08-13 00:57:22,758.758 mcp.server.lowlevel.server] Processing request of type CallToolRequest
[I 2025-08-13 00:57:23,957.957 httpx] HTTP Request: POST https://knowledge-mcp.global.api.aws "HTTP/1.1 200 OK"
[I 2025-08-13 00:57:24,000.000 httpx] HTTP Request: POST https://knowledge-mcp.global.api.aws "HTTP/1.1 200 OK"
[I 2025-08-13 00:57:24,003.003 mcp.server.lowlevel.server] Processing request of type ListToolsRequest
[I 2025-08-13 00:57:24,054.054 httpx] HTTP Request: POST https://knowledge-mcp.global.api.aws "HTTP/1.1 200 OK"
Let me get more specific information about what AWS Amplify is by reading the main documentation page.
Tool #2: aws___read_documentation
[I 2025-08-13 00:57:25,860.860 mcp.server.lowlevel.server] Processing request of type CallToolRequest
[I 2025-08-13 00:57:26,307.307 httpx] HTTP Request: POST https://knowledge-mcp.global.api.aws "HTTP/1.1 200 OK"
Let me search for more comprehensive information about AWS Amplify.
Tool #3: aws___search_documentation
[I 2025-08-13 00:58:58,082.082 mcp.server.lowlevel.server] Processing request of type CallToolRequest
[I 2025-08-13 00:58:59,278.278 httpx] HTTP Request: POST https://knowledge-mcp.global.api.aws "HTTP/1.1 200 OK"
Let me also search for general web information about AWS Amplify to get a comprehensive overview.
Tool #4: websearch
Now let me get more detailed information from the AWS Amplify features page.
Tool #5: aws___search_documentation
[I 2025-08-13 01:01:14,362.362 mcp.server.lowlevel.server] Processing request of type CallToolRequest
[I 2025-08-13 01:01:15,624.624 httpx] HTTP Request: POST https://knowledge-mcp.global.api.aws "HTTP/1.1 200 OK"
^C

Kiro
Looking at the logs, I can see several issues causing the slow response times:

Root Causes:
Tool Execution Delays: Each MCP tool call is taking 1-2 minutes to complete
Multiple Sequential Tool Calls: The agent is making 5+ tool calls sequentially instead of getting a quick answer
Network Latency: The AWS Knowledge MCP server is making multiple HTTP requests with significant delays
No Response Timeout: The agent keeps trying tools without giving up
Performance Issues:
Tool #1: aws___search_documentation - took ~6 seconds
Tool #2: aws___read_documentation - took ~1.5 minutes
Tool #3: aws___search_documentation - took ~1.2 minutes
Tool #4: websearch - was called but likely also slow
Tool #5: aws___search_documentation - took another ~1.6 minutes

Solutions:
Let me optimize the agent configuration to improve response times:
Read file(s)
agent.py
I can see the issue. The system prompt is too generic and doesn't guide the agent to be efficient with tool usage. Let me optimize it:
Accepted edits to
agent.py

Let me also add a simpler configuration option that uses only the faster AWS Documentation MCP server and websearch:
Accepted edits to
agent.py

Now let me also add some timeout and performance optimizations:
Editing
agent.py

Let me also update the README to explain the performance considerations:
2 edits to file
README.md

Now let's test the optimized version:
Command
python3 agent.py

## Add the third mcp server ‚úÖ COMPLETED
Added the third mcp server: AWS EKS MCP Server (awslabs.eks-mcp-server@latest)
- Enables direct EKS cluster management and Kubernetes operations
- Requires --allow-write and --allow-sensitive-data-access flags
- All three MCP servers now enabled by default for comprehensive AWS coverage
## We
bsearch Tool Improvements (Latest)
Enhanced the websearch tool with performance optimizations:
- Added 10-second timeout protection to prevent hanging searches
- Default result limit of 3 for faster responses (auto-caps at 5 max)
- Visual feedback with search progress indicators (üîç Searching, ‚úÖ Found X results)
- Improved error handling with user-friendly messages
- Graceful cleanup ensures timeout signals are always cancelled
- Smart result limiting for optimal speed vs information balance

These improvements directly address the slow response issues identified in the performance analysis above.

## 2 additional MCP servers, performance optimizations ‚úÖ COMPLETED
Performance issues resolved with:
- CRITICAL EFFICIENCY GUIDELINES in system prompt (max 1 tool call per response)
- Knowledge-first approach (answer from built-in knowledge before using tools)
- Enhanced websearch tool with 10-second timeout protection
- Proper MCP client context management with ExitStack
- Smart result limiting for optimal speed vs information balance

## Context Management Improvements ‚úÖ COMPLETED
- Added proper context management for MCP clients during runtime
- Uses ExitStack to manage multiple MCP client contexts reliably
- MCP clients are preserved for runtime usage with proper lifecycle management
- Ensures reliable connections throughout the interactive session

## Tool Discovery & Categorization ‚úÖ COMPLETED
- Added built-in tool discovery with 'tools' command
- Proper MCP tool name and description extraction using tool_name and tool_spec attributes
- Categorized display: Web Search, AWS Documentation, AWS Knowledge, AWS EKS tools
- Shows actual tool names (e.g., read_documentation, search_documentation) instead of "Unknown Tool"
- Enhanced user experience with tool count and usage examples
- Total: 21 tools (1 websearch + 3 AWS docs + 3 AWS knowledge + 14 EKS tools)

## Root Cause Analysis & Resolution ‚úÖ COMPLETED
- Identified and fixed MCP tool loading issue: 'MCPAgentTool' object has no attribute 'name'
- Problem was in debugging code trying to access non-existent .name attribute
- Solution: Removed problematic attribute access, used proper tool_name and tool_spec attributes
- All three MCP servers now load successfully with proper tool information extraction
- Enhanced error handling and timeout protection throughout the application

## Documentation Updates ‚úÖ COMPLETED
- Updated README.md with all recent changes and improvements
- Updated steering files (tech.md, structure.md, product.md) with current architecture
- Added comprehensive .gitignore file for Python/AWS projects
- Removed outdated references and corrected tool counts and capabilities
- Enhanced troubleshooting section with current guidance

## Troubleshooting MCP servers
Kiro: why my agent can't use the MCP servers at all